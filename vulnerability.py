import sqlite3
import os
import json

def get_user_data(username, password):
    # Vulnerability: SQL Injection
    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
    cursor.execute(query)  # This line is vulnerable to SQL injection
    return cursor.fetchall()

def insecure_file_read(filename):
    # Vulnerability: Path Traversal
    with open(f"data/{filename}", 'r') as file:
        return file.read()  # Could allow access to unintended files

def insecure_json_handling(data):
    # Vulnerability: Insecure deserialization
    loaded_data = json.loads(data)  # Unsafe if data comes from an untrusted source
    return loaded_data

# Simulating user input with potential attack vectors
user_input_username = input("Enter username: ")  # User input could be malicious
user_input_password = input("Enter password: ")

# Call functions with user input
user_data = get_user_data(user_input_username, user_input_password)
print(user_data)

# Example for file reading
filename = input("Enter filename to read: ")  # Vulnerable to path traversal
file_content = insecure_file_read(filename)
print(file_content)

# Example for JSON handling
json_data = '{"username": "admin", "role": "user"}'  # Example JSON string
loaded_data = insecure_json_handling(json_data)
print(loaded_data)
